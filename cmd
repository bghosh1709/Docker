##Docker Commands
docker run – Runs a command in a new container.
docker start – Starts one or more stopped containers
docker stop – Stops one or more running containers
docker build – Builds an image form a Docker file
docker pull – Pulls an image or a repository from a registry
docker push – Pushes an image or a repository to a registry
docker export – Exports a container’s filesystem as a tar archive
docker exec – Runs a command in a run-time container
docker search – Searches the Docker Hub for images
docker attach – Attaches to a running container
docker commit – Creates a new image from a container’s changes

############################################################################################################

A container is a runtime instance of an image–what the image becomes in memory when executed (that is, an image with state, or a user process). You can see a list of your running containers with the command, docker ps, just as you would in Linux. — from Docker Concepts
	1. docker ps— Lists running containers. Some useful flags include: -a / -all for all containers (default shows just running) and —-quiet /-q to list just their ids (useful for when you want to get all the containers).
	2. docker pull— Most of your images will be created on top of a base image from the Docker Hub registry.
	 Docker Hub contains many pre-built images that you can pull and try without needing to define and configure your own. To download a particular image, or set of images (i.e., a repository), use docker pull.
	3. docker build— The docker build command builds Docker images from a Dockerfile and a “context”. A build’s context is the set of files located in the specified PATH or URL. Use the -t flag to label the image, for example docker build -t my_container . with the . at the end signalling to build using the currently directory.
	4. docker run— Run a docker container based on an image, you can follow this on with other commands, such as -it bash to then run bash from within the container. Also see Top 10 options for docker run — a quick reference guide for the CLI command. docker run my_image -it bash
	5. docker logs— Use this command to display the logs of a container, you must specify a container and can use flags, such as --follow to follow the output in the logs of using the program. docker logs --follow my_container
	6. docker volume ls— This lists the volumes, which are the preferred mechanism for persisting data generated by and used by Docker containers.
	7. docker rm— Removes one or more containers. docker rm my_container
	8. docker rmi— Removes one or more images. docker rmi my_image
	9. docker stop— Stops one or more containers. docker stop my_containerstops one container, while docker stop $(docker ps -a -q) stops all running containers. A more direct way is to use docker kill my_container, which does not attempt to shut down the process gracefully first.
	10. Use them together, for example to clean up all your docker images and containers:
	• kill all running containers with docker kill $(docker ps -q)
	• delete all stopped containers with docker rm $(docker ps -a -q)
	• delete all images with docker rmi $(docker images -q)
################################################################################################################
Docker Commands :
	# Helpful Docker commands and code snippets
	###############################################################################
	### CONTAINERS ###
	docker stop $(docker ps -a -q) #stop ALL containers
	docker rm -f $(docker ps -a -q) # remove ALL containers
	docker rm -f $(sudo docker ps --before="container_id_here" -q) # can also filter
	# exec into container
	docker exec -it $(docker container ls | grep '<seach_term>' | awk '{print $1}') sh
	# exec into container on windows with Git Bash
	winpty docker exec -it $(docker container ls | grep '<seach_term>' | awk '{print $1}') sh
	# helps with error: 'unexpected end of JSON input'
	docker rm -f $(docker ps -a -q) # Remove all in one command with --force
	docker exec -i -t "container_name_here" /bin/bash # Go to container command line
	# to exit above use 'ctrl p', 'ctrl q' (don't exit or it will be in exited state)
	docker rm $(docker ps -q -f status=exited) # remove all exited containers
	### IMAGES ###
	# list images and containers
	docker images | grep "search_term_here"
	# remove image(s) (must remove associated containers first)
	docker rmi -f image_id_here # remove image(s)
	docker rmi -f $(docker images -q) # remove ALL images!!!
	docker rmi -f $(docker images | grep "^<none>" | awk '{print $3}') # remove all <none> images
	docker rmi -f $(docker images | grep 'search_term_here' | awk '{print $1}') # i.e. 2 days ago
	docker rmi -f $(docker images | grep 'search_1\|search_2' | awk '{print $1}')
	### DELETE BOTH IMAGES AND CONTAINERS ###
	docker images && docker ps -a
	# stop and remove containers and associated images with common grep search term
	docker ps -a --no-trunc | grep "search_term_here" | awk "{print $1}" | xargs -r --no-run-if-empty docker stop && \
	docker ps -a --no-trunc | grep "search_term_here" | awk "{print $1}" | xargs -r --no-run-if-empty docker rm && \
	docker images --no-trunc | grep "search_term_here" | awk "{print $3}" | xargs -r --no-run-if-empty docker rmi
	# stops only exited containers and delete only non-tagged images
	docker ps --filter 'status=Exited' -a | xargs docker stop docker images --filter "dangling=true" -q | xargs docker rmi
	### DELETE NETWORKS AND VOLUMES ###
	# clean up orphaned volumes
	docker volume rm $(docker volume ls -qf dangling=true)
	# clean up orphaned networks
	docker network rm $(docker network ls -q)
	### NEW IMAGES/CONTAINERS ###
	# create new docker container, ie. ubuntu
	docker pull ubuntu:latest # 1x pull down image
	docker run -i -t ubuntu /bin/bash # drops you into new container as root
	### OTHER ###
	# install docker first using directions for installing latest version
	# https://docs.docker.com/installation/ubuntulinux/#ubuntu-trusty-1404-lts-64-bit
	# other great tips: http://www.centurylinklabs.com/15-quick-docker-tips/
	# fix fig / docker config: https://gist.github.com/RuslanHamidullin/94d95328a7360d843e52

From <https://gist.github.com/garystafford/f0bd5f696399d4d7df0f> 


